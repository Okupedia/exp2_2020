[ver 06]

program ::= { statement } EOF
statement   ::= statementAssign
statementAssign    ::= primary ASSIGN expression SEMI

expression ::= term{expressionAdd | expressionSub}
expressionAdd ::= PLUS term
expressionSub ::= MINUS term

term ::= factor {termMult | termDiv}
termMult ::= MULT factor
termDiv ::= Div factor

factor ::= plusFactor | minusFactor | unsignedFactor
plusFactor ::= PLUS unsignedFactor
minusFactor ::= MINUS unsignedFactor
unsignedFactor ::= factorAmp | number | LPAR expression RPAR | addressToValue
addressToValue ::= primary
factorAmp ::= AMP (number | primary)
primary ::= primaryMult | variable
primaryMult ::= MULT variable
variable ::= ident [array]
array ::= LBRA expression RBRA
ident ::= IDENT
number ::= NUM

condition ::= TRUE | FALSE | expression(conditionLT | conditionLE | conditionGT
                                      | conditionGE | conditionEQ | conditionNE)
conditionLT ::= LT expression //<
conditionLE ::= LE expression //<=
conditionGT ::= GT expression //>
conditionGE ::= GE expression //>=
conditionEQ ::= EQ expression //==
conditionNE ::= NE expression //!=

-----------------------------------------------------------------------
[change]

statement   ::= statementAssign | statementIf | statementWhile | statementBlock | statementOutput | statementInput

statementAssign ::= primary ASSIGN expression SEMI
statementIf     ::= IF LPAR condition RPAR statement [ELSE statement]
statementWhile  ::= WHILE LPAR condition RPAR statement
statementOutput ::= OUTPUT expression SEMI
statementInput  ::= INPUT primary SEMI
statementBlock  ::= LCBRA {statement} RCBRA

-----------------------------------------------------------------------
[ver 07]

SEMI    -> ;
assign  -> =
LPAR    -> (    RPAR    -> )
LBRA    -> [    RBRA    -> ]
LCBRA   -> {    RCBRA   -> }
LT      -> <    LE      -> <=
GT      -> >    GE      -> >=
EQ      -> ==   NE      -> !=

program ::= { statement } EOF

statement   ::= statementAssign | statementIf | statementWhile | statementBlock | statementOutput | statementInput
statementAssign ::= primary ASSIGN expression SEMI
statementIf     ::= IF LPAR condition RPAR statement [ELSE statement]
statementWhile  ::= WHILE LPAR condition RPAR statement
statementOutput ::= OUTPUT expression SEMI
statementInput  ::= INPUT primary SEMI
statementBlock  ::= LCBRA {statement} RCBRA

expression ::= term{expressionAdd | expressionSub}
expressionAdd ::= PLUS term
expressionSub ::= MINUS term

term ::= factor {termMult | termDiv}
termMult ::= MULT factor
termDiv ::= Div factor

factor ::= plusFactor | minusFactor | unsignedFactor
plusFactor ::= PLUS unsignedFactor
minusFactor ::= MINUS unsignedFactor
unsignedFactor ::= factorAmp | number | LPAR expression RPAR | addressToValue

factorAmp ::= AMP (number | primary)
number ::= NUM

addressToValue ::= primary
primary ::= primaryMult | variable
primaryMult ::= MULT variable
variable ::= ident [array]
array ::= LBRA expression RBRA
ident ::= IDENT

condition ::= TRUE | FALSE | expression(conditionLT | conditionLE | conditionGT
                                      | conditionGE | conditionEQ | conditionNE)
conditionLT ::= LT expression //<
conditionLE ::= LE expression //<=
conditionGT ::= GT expression //>
conditionGE ::= GE expression //>=
conditionEQ ::= EQ expression //==
conditionNE ::= NE expression //!=
